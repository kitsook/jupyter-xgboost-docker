FROM ubuntu:20.04

ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NONINTERACTIVE_SEEN=true

# Install Ubuntu packages
RUN apt-get update && apt-get install -y git wget bzip2 ca-certificates \
  build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev curl git-core \
  htop pkg-config unzip unrar tree freetds-dev vim sudo nodejs npm net-tools librsvg2-dev \
  flex perl automake bison libtool byacc libtiff-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev

#Installing Python and PIP
RUN apt-get update && apt-get install -y \
    python3.8 \
    python3-pip

#Installing all ML python libraries , Jupyter and Extensions 
# using older version of numpy so we can install numba. removed rff2pandas
RUN pip3 install scipy==1.8.0 numpy==1.21.6 matplotlib==3.5.1 pandas==1.4.2 statsmodels==0.13.2 scikit-learn==1.0.2 \
  theano==1.0.5 tensorflow==2.8.0 keras==2.8.0 xgboost==1.6.0 shap==0.40.0 \
  jupyterlab==3.3.4 \
  torch==1.12.0 torchvision==0.13.0 torchaudio==0.12.0 ipywidgets==7.7.1 \
  scikit-plot==0.3.7 kaggle==1.5.12 seaborn==0.11.2 jupyter_contrib_nbextensions==0.5.1 \
  jupyter_nbextensions_configurator==0.4.1 dowhy==0.7.1 onnx==1.12.0 protobuf==3.20.1

#Install Graphviz for python and R
RUN apt-get update && apt-get install -y graphviz libgraphviz-dev graphviz-dev && pip3 install graphviz==0.20 pygraphviz==1.9 

#Install R
RUN apt-get update -qq && \
  apt-get install -y dirmngr ca-certificates software-properties-common && \
  wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc && \
  add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/" && \
  apt-get install -y r-base

#Install rpy2 to run R in pythong Kernels
RUN pip3 install rpy2==3.5.1

# Install R packages
RUN R -e "install.packages(c('xgboost','roxygen2', 'rversions','repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest','BiocManager','dplyr','ggplot2','tidyr','igraph','mice'))" && \
  R -e "devtools::install_github('IRkernel/IRkernel')" && \
  R -e "IRkernel::installspec()" && R -e "BiocManager::install('Rgraphviz')" && \
  R -e "install.packages(c('DiagrammeR','DiagrammeRsvg','rsvg'))"

# Clean up
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

#ARG UID=1000
ARG LOGFILE=/ml-disk/jupyter.log

# Adds metadata to the image as a key value pair
LABEL version="1.0"

# Set environment variables
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

# Create empty directory to attach volume
RUN mkdir /ml-disk

# Setup User
RUN useradd -m -d /home/ml-user -s /bin/bash ml-user
RUN usermod -aG sudo ml-user

USER ml-user
WORKDIR /home/ml-user

# cert for testing purpose
RUN openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout mykey.key -out mycert.pem -subj "/C=CA/ST=BC/L=Vancouver/O=jupyter-ml-test"

## Setup Jupyter
RUN jupyter lab --generate-config && \
  jupyter nbextensions_configurator enable --user && \
  jupyter contrib nbextension install --user 
RUN echo "c.ServerApp.certfile = u'/home/ml-user/mycert.pem'" >> /home/ml-user/.jupyter/jupyter_lab_config.py && \
  echo "c.ServerApp.ip = '*'" >> /home/ml-user/.jupyter/jupyter_lab_config.py && \
  echo "c.ServerApp.keyfile = u'/home/ml-user/mykey.key'" >> /home/ml-user/.jupyter/jupyter_lab_config.py && \
  echo "c.ServerApp.notebook_dir = '/ml-disk'" >> /home/ml-user/.jupyter/jupyter_lab_config.py && \
  echo "c.ServerApp.open_browser = False" >> /home/ml-user/.jupyter/jupyter_lab_config.py && \
  echo "c.ServerApp.password = 'argon2:\$argon2id\$v=19\$m=10240,t=10,p=8\$S0NsAL2R6FCzDV9DLQzH4g\$Xy4KM24jEjab4o47EOWbaciNPzGm8X0Y9bhgCN2cyiU'" >> /home/ml-user/.jupyter/jupyter_lab_config.py 
COPY entryPoint.sh /root
USER root
WORKDIR /root


ENTRYPOINT ["sh","entryPoint.sh"]

